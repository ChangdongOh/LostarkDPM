
A) 공격력 공식 및 기본 시스템 설정
기본 공격력 = sqrt((stat * weapon_power) / 6)
무품 100으로 정해놓고 추가피해를 설정한다.
헬설정, 시너지는 각인의 일종으로 지원한다.
헤드어택 : 피해량 20% 증가, 무력화 10% 증가
백어택 : 피해량 5% 증가, 치명타 적중률 10% 증가

출혈
약 50번 정도 무공 0으로 측정한 결과 236의 기본 데미지로 추정
무공 145, 170으로 약 50번 정도 각각 측정하여 2.6875의 계수로 추정
  1) https://www.inven.co.kr/board/lostark/4821/88648
속행 확률 10%
광분 확률 20%

특화 계수는 699 기준 표시되는 값으로 구한다.
================================================================
B) 버프의 종류 및 관리 방법
버프는 크게 두가지 종류로, stat_buff, damage_buff가 존재한다.

stat_buff는 돌대, 공증 등 stat과 skill의 attribute를 확인해 스킬의 stat을 변경하는 buff이다.
-> stat_buff는 character와 skill의 attribute를 변경하는 식으로 작동
damage_buff는 출혈, 화상 등 지속딜을 나타내는 버프이다.
-> damage_buff는 _calc_damage_from_buffs()에서 계산해서 damage history에 추가해주는식

버프의 생성은 buff_manager에서 register_buff를 통해 진행하고(dict를 통해 import)
소멸은 매 틱마다 buff_manager에서 expire여부를 확인해 처리한다.
중복되는 버프가 발생시(이름이 겹치고 effect가 다른 경우) priority가 높은 버프만 처리하고 priority가 낮은 버프는 비활성화한다.
버프가 register 또는 unregister 될 때마다 이를 재확인하여 비활성화/활성화 여부를 결정하며, 이는 _shadow_buffs에서 진행한다.

attributes
-> name, buff_type, originated_skill, effect, begin_tick, duration, priority, is_shadowed, stack
damage_buff only
-> base_damage, coefficient, damage_interval

버프의 서순을 관리하기 위해 적절한 priority(0~31)를 설정한다.
_sort_buffs를 통해 descending order로 정렬하며, 따라서 priority가 클수록 먼저 처리된다.
  1) 공이속 및 딜레이에 영향을 주는 버프를 높은 우선순위를 준다. (ex) 정기흡수, 속전속결, 슈퍼차지)
  2) 공이속의 영향을 받는 버프는 낮은 우선순위를 주어 마지막에 적용한다. (ex) 돌격대장)
공이속 관련 -> 9
일반 버프 -> 7
공이속에 영향을 받는 버프 -> 1
================================================================
C) 스킬의 종류 및 필드 소개

json을 통해 skill_manager에 import한다.

attributes
-> name, level, default_damage, default_coefficient, skill_type, identity_type, cooldown,
   common_delay, type_specific_delay, head, back, jewel_cooldown_level, jewel_damage_level
triggered actions
-> triggered_actions
simulation variables
-> buff_applied, damage_mutiplier, remaining_cooldown, priority, actual_delay

attribute: 데미지 계산에 활용 하는 static한 변수를 등록한다.
default_coefficient는 default damage와 level을 참조하여 각 class별 스킬 계수 테이블(dynamic/constants.py)을 활용하여 계산한다.
  1) https://www.inven.co.kr/board/lostark/4821/89074
triggered_actions: action을 관리, action은 skill_manager와 buff_manager의 method를 활용하여 skill의 쿨타임 변화, buff의 등록에 직접 관여한다.
미리 추가해놓거나 finalize_skill을 통해 skill에 등록되며 base.py 또는 class별 모듈에 pre-defined된 function을 활용, 특정 rune도 같은 방식으로 처리한다.
더미 스킬에 action을 부여하여 identity 처리 등 원하는 동작을 하도록 사용할 수도 있다.
simulation variables: skill manager가 활용하는 변수들, policy에서 참고하여 다음 스킬을 계획하거나 데미지 계산에 활용한다.

추가 치명타 확률, 추가 치명타 피해는 json파일에 base_additional 관련 필드로 추가한다.
-> base_additional_crit_rate, base_additional_crit_damage
================================================================
D) 스킬 데미지 공식

공격력 = 기본 공격력 * (1 + 추가 공격력)
스킬 데미지 = 기본 데미지 * (1 + 공격력 * 스킬 계수) * 추가피해 * 캐릭터 피해 증가 * 스킬 피해 증가 * 치명타 피해 증가(기댓값) * 데미지 보석
  1) https://www.inven.co.kr/board/lostark/4821/77877
  2) https://www.inven.co.kr/board/lostark/4821/9927
  3) https://www.inven.co.kr/board/lostark/4821/89074
방어력 데미지 감소 = (0.8 * 6500 / (6500 * (1-방감수치) + 6500)
  1) https://www.inven.co.kr/board/lostark/4821/90687
최종 데미지 = 스킬 데미지 * 방어력 데미지 감소  
================================================================
E) 스킬의 쿨타임 관리

쿨타임은 스킬 유형별로 시작시(일반, 콤보, 지점, 차징, 홀딩A)와 종료시 도는 것으로 구분(체인, 캐스팅, 홀딩B(캔슬 가능한 경우))
  1) https://lostark.game.onstove.com/GameGuide/Pages/%EC%A0%84%ED%88%AC%20%EC%8A%A4%ED%82%AC
Common, Point, Combo, Charge, Holding_A(일반 홀딩 or 퍼펙트 존) -> 시작시 쿨이 돌음
Casting, Holding_B(캔슬 가능한 홀딩) -> 끝날 시 쿨이 돌음
Chain -> 마지막 스킬 모션 시작부터 쿨이 돌음

스킬의 쿨타임 감소 항은 곱연산으로 적용한다.
고정 시간 쿨타임 감소 및 증가 트라이포드는 json파일 작성 단계에서 처리하고 스킬 비고에 작성해둔다.
================================================================
F) 스킬 policy 구성 및 skill_manager의 cycle fetch

policy를 자유롭게 풀어주는건 실제 사이클을 반영하기가 생각보다 힘들었다...
cycle을 제공받아 고정된 스킬 순서로 사용하는 것을 먼저 지원하고 이후에 기능을 추가하는 방향으로 선회
"mode": fixed,
"cycle": ["123", "456", "789"]

각 서브 사이클을 제공받아 서브 사이클을 우선순위 순서대로 나열한다.
skill_manager는 _fetch_next_skills()에서 남은 쿨다운과 이전 딜레이 정보를 바탕으로 사이클의 사용 가능 여부를 판단하여
가장 높은 우선순위의 사이클을 반환한다. 모든 사이클이 사용 불가능할시 idle로 전환한다.

================================================================
G) DB구축을 위한 계수, 딜레이, 스킬 특성 기록 방법

계수 및 데미지 측정
1) 새로 작업하는 직업일 경우 레벨별 스킬 계수 측정
2) 기본 데미지 작성
3) 트라이포드 배율 측정

딜레이 측정
딜레이는 pre_delay - type_specific_delay - post_delay로 구성되며 시작과 종료 프레임을 _i, _f로 기록
스킬을 사용하고 바로 움직여 캐릭터가 움직이기 시작하는 시점을 스킬이 마무리되는 시점으로 측정
1) 60fps로 각 스킬별 영상 녹화, 2번씩 진행, 공속관련 트포는 적용 시켜놓고 측정하고 비고에 기록
2) 하단 HUD에서 스킬 아이콘이 점등되는 시점 또는 캐릭터의 모션이 시작되는 시점을 기준으로 pre_i에 기록
3) 각 스킬 종류에 맞게 pre_f기록
  a) Common, Point는 스킬이 마무리되는 프레임을 pre_f에 기록
  b) Combo, Chain은 마지막 스킬이 시작되기 직전의 프레임을 pre_f에 기록
  c) Holding_A, Holding_B, Casting, Charge는 게이지가 차오르기 직전의 프레임을 pre_f에 기록
4) 각 스킬 종류에 맞게 t_i기록
  a) Common, Point는 type_specific_delay가 존재하지 않으므로 기록 x
  b) Combo, Chain은 마지막 스킬이 시작되는 프레임을 t_i에 기록, 스킬 아이콘 점등 시점이 기준
  c) Holding_A, Holding_B, Casting, Charge는 게이지가 차오르기 시작하는 프레임을 t_i에 기록
5) 각 스킬 종류에 맞게 t_f기록
  a) Common, Point는 type_specific_delay가 존재하지 않으므로 기록 x 
  b) Combo, Chain은 마지막 스킬이 마무리되는 프레임을 t_f에 기록
  c) Holding_A, Holding_B, Casting, Charge는 게이지가 꽉 차서 점등하는 프레임을 t_f에 기록
6) 각 스킬 종류에 맞게 post_i기록
  a) Common, Point, Combo, Chain은 post_delay가 존재하지 않으므로 기록 x 
  b) Holding_A, Holding_B, Casting, Charge는 게이지 점등 이후 캐릭터가 새로운 모션을 취하는 시점을 post_i에 기록
7) 각 스킬 종류에 맞게 post_f기록
  a) Common, Point, Combo, Chain은 post_delay가 존재하지 않으므로 기록 x 
  b) Holding_A, Holding_B, Casting, Charge는 모든 스킬이 마무리되고 이동 명령을 수행하는 시점을 post_f에 기록

위 측정을 마무리하면 각 스킬 타입별 딜레이 정보를 확인 가능
1) pre_delay
  a) Common, Point는 스킬의 전체 딜레이
  b) Combo, Chain은 마지막 스킬 이전 스킬들의 딜레이 총합
  c) Holding_A, Holding_B, Casting, Charge는 게이지가 차오르기 직전의 선딜레이 총합
2) type_specific_delay
  a) Common, Point는 존재 x
  b) Combo, Chain은 마지막 스킬의 딜레이 총합
  c) Holding_A, Holding_B, Casting, Charge는 게이지 부분의 딜레이 총합
3) post_delay
  a) Common, Point, Combo, Chain은 존재 x
  b) Holding_A, Holding_B, Casting, Charge는 게이지 파트 이후의 후딜레이 총합

스킬 특성 기록
1) 쿨감 관련 트포는 json에 입력시 변경해서 입력
2) 스킬 타입, 스킬 종류, 백어택, 헤드어택, 쿨감 보석, 뎀증 보석, 룬 기록
3) 마나를 사용하지 않는 스킬의 경우 mana_cost=0으로 입력
3) 스킬 누르는 횟수를 key_strokes에 입력하여 chain의 경우 여러 번 룬을 사용하게 함

