기본 공격력 = sqrt((stat * weapon_power) / 6)
스킬 데미지 = 기본 데미지 * (1 + 공격력 * 스킬 계수) 
  1) https://www.inven.co.kr/board/lostark/4821/77877
  2) https://www.inven.co.kr/board/lostark/4821/9927
  3) https://www.inven.co.kr/board/lostark/4821/89074
특화 계수는 699 기준 표시되는 값으로 구한다.
================================================================
refresh의 목적 -> 최종 status를 계산해내는 것(attack_power, damage_mutiplier, crit_rate, cooldown, moving_speed, attack_speed)
static한 부분에서 할 수 있는 최대한의 status를 만들어내고 이를 dynamic에서 핸들링 하는것이 합리적인듯
따라서 돌대, 직각은 buff나 identity에서 다루는 것이 효율적일듯
================================================================
buff는 어떻게 관리하는가?
크게 두가지 종류 -> stat_buff, damage_buff

stat_buff는 돌대, 공증 등 stat과 skill의 attribute를 확인해 스킬의 stat을 변경하는 buff이고
-> stat_buff는 character와 skill을 변경하는 식으로 작동
damage_buff는 출혈, 화상 등 지속딜을 나타내는 버프이다.
-> damage_buff는 refresh buff based on tick에서 계산해서 damage history에 추가해주는식

버프의 생성은 invoke skill and update buff에서 진행하고(dict를 통해 import)
소멸은 refresh buff based on tick에서 expire여부를 확인해 처리한다.
버프는 따라서 생성시간을 이용해 소멸 시간을 기록해두어야한다

attributes: 기본정보
->name, source, target, effect, duration

buff_type에 따라 적절히 attributes를 추가해주는식
각 버프는 직업별 코드에 추가해놓는다

버프에는 우선순위가 있음(돌대는 공이속 연산이 끝난 뒤 적용하는 식)
공이속 관련 -> 9
일반 버프 -> 7
공이속에 영향을 받는 버프 -> 1
우선순위가 클수록 먼저 처리된다
================================================================
skill에는 뭐가 있어야 하는가?
기본적으로 json을 통해 import한다.

attributes
-> name, default_damage, default_coefficient, skill_type, identity_type, cooldown,
   common_delay, type_specific_delay, head, back, jewel_cooldown_level, jewel_damage_level
triggered actions
-> triggered_actions
simulation variables
-> buff_applied, damage_mutiplier, remaining_cooldown, priority, actual_delay

attribute: skill_buff처리에 활용 하는 static한 변수들, skill_buff apply시 simulation variables를 조절
-json으로 import
trigger related: buff manager를 modify하는 skill들의 처리와 다른 skill들의 simulation variables를 조절하는 action(cooldown 조절, 버프 사용이 주된 사용처)
-json으로 import, class별 pre-defined된 function을 활용, rune은 base.py에서 pre-define
simulation variables: skill manager가 활용하는 변수들, policy에서 참고하여 다음 스킬 계획 및 데미지 계산
-import시 추가

Common, Charge, Holding_A(일반 홀딩 or 퍼펙트 존) -> 시작시 쿨이 돌음
Casting, Holding_B(캔슬 가능한 홀딩) -> 끝날 시 쿨이 돌음
Combo, Chain -> 마지막 스킬 모션 시작부터 쿨이 돌음

action은 buff_manager, skill_manager에서 제공하는 메소드를 활용하여 버프를 발동, 제거하거나 스킬의 쿨다운을 증가, 감소 시키는 식으로 작동한다.
더미 스킬에 action을 부여하여 원하는 동작을 하도록 사용할 수도 있다(identity 처리)

================================================================
identity는 어떻게 처리하는가?
일종의 스킬로 취급하여 처리한다. 확률이 개입하는 아덴은 고민해봐야할듯
버서커: 버프, 광기는 각인단에서 처리
-> skill, turn on buff
워로드: x
디트: 해방스킬 코어적용-> 더미스킬, 아덴은 스킬
-> skill, turn on buff(short)
배마: 오의스킬 버블적용-> 더미스킬
-> skill, turn on buff(short)
인파: x
기공: 역천의 경우 버프, 세맥은 단계별 버프를 사이클마다 끼워넣어야할듯
-> skill, turn on buff
창술: 절정만 버프처리
-> skill, turn on buff(short)
스커: 일격필살 오의스킬 버블적용-> 더미스킬
-> skill, turn on buff(short)
데헌: 스탠스별 버프
-> skill, turn on buff(short)
블래: 게이지는 버프, 포격모드는 스킬처리 -> 버프의 갱신?
-> skill, turn on buff(short)
호크: ?
스카: 유산은 버프처리 -> 버프의 갱신? 변신 스킬 처리?
-> skill, turn on buff(short), update
건슬: 피메로 인한 스탠스별 버프처리 필요, 더미 스킬 도입?
-> skill, turn on buff(short)
서머: 아덴은 스킬처리
-> skill
알카: ? 확률 도입?
소서: 점화의 경우 버프처리, 스킬의 쿨감?
모닉: 충동의 경우 버프처리, 변신 스킬 처리?
블레: 스킬의 쿨감? 버스트의 데미지?
-> skill, turn on buff
리퍼: 달소 버프 제공
-> skill, turn on buff(short)
-> 버프의 갱신, 변신 스킬 처리, 스탠스별 더미 스킬, 스킬의 쿨감 도입이 필요

특화 계수 정리자료
  1) https://www.inven.co.kr/board/lostark/4821/78320
================================================================
policy에는 뭐가 있어야 하는가?

=== 무시 ===
스킬의 priority를 부여하여 skill_queue(priority queue)를 구성한다.
다만 특정 스킬들의 순서를 고정하고 싶으면 바인딩을 부여한다. ex)증배버차
바인딩으로 묶인 스킬들은 하나의 스킬로 취급되며, priority는 스킬중 가장 높은 스킬이 가져간다.
사실 가장 편한 방식은 모든 스킬을 하나의 바인딩으로 묶어서 제시하는 것이 가장 편할듯하다.

json을 통해 import한다.
attributes
->priorities, bindings, lookup_cooldown

remaining_cooldown < lookup_cooldown인 스킬들에 대해
priority를 고려하여 queue에 올린다.
binding이 있는 스킬은 queue에 올릴 때 실제로 가용가능한지(바인딩 내부 스킬들의 쿨타임이 목표 스킬보다 작은지) 확인한다.
만약 queue에 스킬이 없다면 idle 상태로 취급한다.

idle 처리방식 추가 필요
validation추가 필요

어디다 어떻게 적어야하는가?
skill정보를 담은 json에 작성 요령을 정해 적어두는게 좋을듯 하다
=== 무시 ===

policy를 자유롭게 풀어주는건 실제 사이클을 반영하기가 생각보다 힘들었다...
cycle을 제공받아 고정된 스킬 순서로 사용하는 것을 먼저 지원하고 이후에 기능을 추가하는 방향으로 선회
"mode": fixed,
"cycle": ["123", "456", "789"]

각 서브 사이클을 제공받아 서브 사이클을 우선순위 순서대로 나열한다.
skill_manager는 남은 쿨다운과 이전 딜레이 정보를 바탕으로 사이클의 사용 가능 여부를 판단하여
가장 높은 우선순위의 사이클을 반환한다. 모든 서브 사이클이 사용 불가능할시 idle로 전환한다.
================================================================
기타 설정
무품 100으로 정해놓고 추피 설정
헬설정, 시너지는 각인의 일종으로 올려놓기
방깎은 1%당 0.55% 딜증 취급
(0.55~0.6까지 다양했으나 최소값으로 지정, 실제로는 수치가 높을수록 효율이 하락하기에 최저값으로 지정)
  1) https://www.inven.co.kr/board/lostark/5647/70762
헤드어택 : 피해량 20% 증가, 무력화 10% 증가
빽어택 : 피해량 5% 증가, 치명타 적중률 10% 증가
쿨타임은 스킬 유형별로 시작시(일반, 지점, 차징, 홀딩A)와 종료시 도는 것으로 구분(콤보, 체인, 캐스팅, 홀딩B(캔슬 가능한 경우))
  1) https://lostark.game.onstove.com/GameGuide/Pages/%EC%A0%84%ED%88%AC%20%EC%8A%A4%ED%82%AC
콤보 및 체인은 사실 여러개의 스킬의 조합으로 이루어져 있어서 마지막 스킬의 사용시 쿨이 돌기 시작함.
따라서 콤보 및 체인은 type_specific_delay에 마지막 스킬의 딜레이를 별도 기재해서 쿨다운시 별도 연산을 줄 예정

출혈
약 50번 정도 무공 0으로 측정한 결과 236의 기본 데미지로 추정
무공 145, 170으로 약 50번 정도 각각 측정하여 2.6875의 계수로 추정
속행
확률 10%
광분
확률 20%
================================================================
계수 및 딜레이 측정
1. 인벤을 참조해 기본 데미지 작성
2. 머리장비를 해제하며 계수 측정(유효숫자 4자리)
3. 노가다로 트라이포드 배율 측정
4. 영상녹화 및 평타의 모션을 활용해 프레임 단위로 딜레이 측정(공속 트포는 적용 시켜놓고 측정)
5. 쿨감 관련 트포는 json에 입력시 변경해서 입력
  1)https://www.inven.co.kr/board/lostark/5339/123086

일단은 type_specific_delay에 대한 설명부터 드리면 이건 Combo, Chain, Holding_A, Holding_B, Casting, Charge를 위한 딜레이라고 보시면 됩니다.
각 스킬 타입별로 역할이 살짝 다른데,
Combo의 경우 스킬 쿨타임 시작 시점을 조절하는 역할 입니다. 만약 2번 눌러서 쓰는 스킬이라면 스킬 쿨타임이 두번째 키입력부터 돌아가기 때문에
pre딜레이에 첫 키입력의 딜레이, type_specific에 두번째 키 입력부터  마무리까지를 입력하면 됩니다. Chain도 동일한데 룬이나 triggered_action이 key_strokes만큼 시행되는 차이점이 있습니다.
Holding의 경우 Holding_A는 스킬을 누를 때 쿨이 도는 스킬입니다. Holding_B는 스킬의 시전이 끝날 때 쿨이 도는 스킬입니다.
두 스킬 모두 선딜-홀딩 게이지 차오름-풀로 채우고 후딜이 나옴 구조인데 여기서 순서대로 pre, t, post에 입력하면 됩니다. 홀딩 스킬은 게이지가 차오르는 부분만 속속 적용이 되는데 type_specific_delay를 줄여주는 방식으로 작동합니다. 엑셀에서 pre와 post 즉 선딜과 후딜은 common으로 들어가고 홀딩 구간만 type으로 들어갑니다.
Casting은 Holding_B와 유사하게 작동한다고 보시면 되고(캔슬시 쿨이 아예 돌지 않는다는 차이점이 있지만 계산기는 스킬을 끊지 않으므로)
Charge도 마찬가지로 선딜-차지 게이지 차오름(게이지가 반짝거리는 시점을 오버차지로 판단)-후딜 순서대로 pre, t, post로 입력합니다. Holding_A처럼 작동한다고 보시면 됩니다. 
